%% C4 Context Diagram Test
C4Context
    title System Context diagram for Internet Banking System

    Person(customerA, "Personal Banking Customer", "A customer of the bank, with personal bank accounts.")
    Person_Ext(customerB, "Business Banking Customer", "A customer of the bank, with business bank accounts.")

    System(systemA, "Internet Banking System", "Allows customers to view information about their bank accounts.")
    System_Ext(systemB, "Mainframe Banking System", "Stores all of the core banking information.")
    SystemDb(systemC, "Banking Database", "Stores account information")
    SystemQueue(systemD, "Banking Queue", "Message queue")

    Rel(customerA, systemA, "Uses")
    Rel(systemA, systemB, "Uses")
    BiRel(systemA, systemC, "Read/Write")
    Rel_Back(systemB, systemA, "Sends data")
    Rel_Neighbor(systemA, systemD, "Sends messages")

    UpdateElementStyle(customerA, #lightblue, #black, #blue)
    UpdateRelStyle(customerA, systemA, #blue, #blue)

%% C4 Container Diagram Test
C4Container
    title Container diagram for Internet Banking System

    Person(customer, "Customer", "A customer of the bank")

    Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and the internet banking SPA")
    ContainerDb(database, "Database", "SQL Database", "Stores user registration information")
    ContainerQueue(queue, "Message Queue", "RabbitMQ", "Handles async communication")
    Container(api, "API Application", "Java, Spring Boot", "Provides internet banking functionality via API")

    Rel(customer, web_app, "Uses", "HTTPS")
    Rel_Down(web_app, api, "Makes API calls to", "HTTPS")
    Rel_Right(api, database, "Reads from and writes to", "JDBC")
    Rel_Left(api, queue, "Sends messages to", "AMQP")

    System_Boundary(c1, "Internet Banking") {
        Container(web, "Web Application", "Java", "Delivers content")
        Container(api_internal, "API", "Java", "Provides API")
    }

%% C4 Component Diagram Test
C4Component
    title Component diagram for API Application

    Container(spa, "Single-Page App", "JavaScript, Angular", "Provides banking functionality")
    Component(signinController, "Sign In Controller", "Spring MVC Controller", "Allows users to sign in")
    ComponentDb(securityComponent, "Security Component", "Spring Bean", "Provides security features")
    ComponentQueue(emailComponent, "Email Component", "Spring Bean", "Sends emails")

    Rel(spa, signinController, "Uses", "HTTPS")
    Rel_Down(signinController, securityComponent, "Uses")
    Rel_Up(emailComponent, signinController, "Sends email using")

%% C4 Dynamic Diagram Test
C4Dynamic
    title Dynamic diagram for user authentication

    Person(user, "User", "A user of the system")
    Container(webapp, "Web App", "JavaScript", "User interface")
    Container(api_server, "API Server", "Java", "Backend API")
    ContainerDb(db, "Database", "PostgreSQL", "Data storage")

    Rel(user, webapp, "1. Enters credentials")
    Rel(webapp, api_server, "2. POST /login")
    Rel(api_server, db, "3. Validate credentials")
    Rel_Back(db, api_server, "4. Return user data")
    Rel_Back(api_server, webapp, "5. Return JWT token")

%% C4 Deployment Diagram Test
C4Deployment
    title Deployment diagram for Internet Banking System

    Deployment_Node(browser, "Customer's Browser", "Web Browser", "The web browser used by the customer")
    Deployment_Node(server, "Production Server", "Ubuntu 20.04", "Production environment")
    Deployment_Node(db_server, "Database Server", "Ubuntu 20.04", "Database environment")

    Container(webapp_deploy, "Web Application", "Java", "Delivers content")
    ContainerDb(database_deploy, "Database", "PostgreSQL", "Stores data")

%% Test with deeply nested boundaries (up to 4 levels)
C4Context
    Enterprise_Boundary(b1, "Enterprise Boundary Level 1") {
        Person(user1, "User 1", "At level 1")
        System_Ext(sys0, "External System", "Outside nested boundary")
        SystemDb(sysDb, "System Database", "Database at level 1")
        SystemDb_Ext(sysDbExt, "External DB System", "External database system")
        SystemQueue_Ext(sysQueueExt, "External Queue", "External queue system")

        System_Boundary(b2, "System Boundary Level 2") {
            System(sys1, "System 1", "Description at level 2")
            SystemQueue(sysQueue, "System Queue", "Queue at level 2")

            Container_Boundary(b3, "Container Boundary Level 3") {
                Container(cont1, "Container 1", "Tech", "Description at level 3")
                ContainerDb(contDb, "Container Database", "PostgreSQL", "Database at level 3")
                ContainerDb_Ext(contDbExt, "External Container DB", "MongoDB", "External database")
                ContainerQueue(contQueue, "Container Queue", "RabbitMQ", "Queue at level 3")
                ContainerQueue_Ext(contQueueExt, "External Container Queue", "Kafka", "External queue")

                System_Boundary(b6, "Deepest System Boundary Level 4") {
                    System(sys4, "System 4", "At level 4")
                    Component(comp1, "Component 1", "Java", "Component at level 4")
                    ComponentDb(compDb, "Component DB", "MongoDB", "Component database")
                    ComponentDb_Ext(compDbExt, "External Component DB", "Redis", "External component database")
                    ComponentQueue_Ext(compQueueExt, "External Component Queue", "NATS", "External component queue")
                }
            }
        }

        Enterprise_Boundary(b4, "Nested Enterprise Boundary Level 2") {
            Person_Ext(user2, "External User", "Second user at level 2")
            System(sys2, "System 2", "In nested enterprise")
            Deployment_Node(node1, "Deployment Node", "AWS", "Cloud deployment")

            System_Boundary(b5, "Another System Boundary Level 3") {
                System(sys3, "System 3", "At level 3")

                Container_Boundary(b7, "Deep Container Boundary Level 4") {
                    Container(cont3, "Container 3", "Node.js", "Deep container")
                    Component(comp2, "Component 2", "React", "Frontend component")
                    ComponentQueue(compQueue, "Component Queue", "Kafka", "Component queue")
                }
            }
        }
    }

%% Test with UpdateLayoutConfig
C4Context
    UpdateLayoutConfig(800, 600)
    Person(p1, "Person", "Description")
    System(s1, "System", "Description")
    Rel(p1, s1, "Uses")
